import tkinter
import random

WIDTH = int(input("The width of labyrinth (better 13 - 60): "))
HEIGHT = int(input("The heigh of labyrinth (better 13 - 25): "))

field = [[1 for i in range(HEIGHT)] for i in range(WIDTH)]

c = tkinter.Canvas( width = (WIDTH) * 20, heigh = (HEIGHT)*20 + 150)
c.pack()

"""
Следующая функция произвольным образом делит отрезок данной длины (lt)
на данное количество кусков (pc)
"""

def divider(lt , pc):
    pc = pc - 1
    lt = lt - 1

    #создается массив с отношениями длин кусков:
    proport = []

    #массив с будущими координатами концов кусков:
    devire = [0]*(pc+2)
    devire[pc+1] = lt
    s = 0

    #в массив с отношениями кладутся случайные числа:
    for j in range(pc):
        proport.append(random.randint(5 , 10))
        s += proport[j]

    #в массив с координатами кладутся координаты в соответствии с длинами из proport
    for i in range(pc):
        devire[i+1] = int(devire [i] + lt // (s / proport[i]))
    return(devire)


"""
Эта функция предназнаена для того, чтоюы пролажить извилистый путь
от одного конца лабиринта до другого
"""

def walker_main(x1 , y1 , x2 , y2): 
    global field 
    global WIDTH 
    global HEIGHT

    #из двух координат меньшая становится первой, большая - второй:
    x1 , x2 = min(x1 , x2) , max(x1 , x2)
    y1 , y2 = min(y1 , y2) , max(y1 , y2)

    #при помощи функции выше отрезок между х1 и х2 делится на некоторое количество частей:
    cs = divider((x2-x1) , int((((x1-x2)**2 + (y1-y2)**2)**0.5) // 5 + 1))
    for k in range(len(cs)):
        cs[k] += x1

    #концам каждой части будет соответствовать случайная координата по вертикали:
    ys = [random.randint(2 , (HEIGHT-1)) for y in range(len(cs))]

    #получилось два массива с координатами случайных точек, между которыми пойдет путь
    #далее между двумя соседними точками прокладывается путь буквой Г

    for i in range(len(cs) - 1):
        for h in range(cs[i+1] - cs[i] + 1):
            field[cs[i] + h - 1][ys[i] - 1] = 0
    for i in range(len(ys) - 1):
        if ys[i+1] - ys[i] > 0:
            for h in range(ys[i+1] - ys[i]):
                field[cs[i + 1] - 1][ys[i] + h - 1] = 0
        else:
            for h in range(ys[i] - ys[i+1]):
                field[cs[i + 1] - 1][ys[i] - h - 1] = 0

    for i in range(HEIGHT):
        if field[-2][i] == 0:
            if field[-2][i+1] == 1:
                if field[-2][i-1] == 0:
                    field[-1][i-1] = 0
                elif field[-2][i-1] == 1:
                    field[-1][i] = 0

    #функция формирует выход из лабиринта: чтобы крайняя клетка была единственной
        for x in range(1,WIDTH-2):
            for y in range(1,HEIGHT-1):
                a = []
                counter = 0
                a.append(field[x-1][y])
                a.append( field[x+1][y])
                a.append( field[x][y-1])
                a.append( field[x][y+1])

    #формируются "лже-ходы" в лабиринте
                for i in range(len(a)):
                    if a[i] ==0:
                        counter += 1 + random.randint(0 , 2)
                if counter == 1:
                    field[x][y] = 0

walker_main(1, 1, WIDTH, HEIGHT)

#алгоритм поиска координаты "входа" в лабиринт
sh = 1

for i in range(HEIGHT):
    if field[0][i] == 0:
        sh =i

"""
Aлгоритм прохождения лабиринта "Левая рука", подробнее в отчете
"""

def left_hand(x, y, xp, yp, count):
    global field
    global WIDTH
    global HEIGHT
    global c

    c.coords(mousebot, 4 * (x + 4 * xp) , 4 * (y + 4 * yp) , 4 * (x + 4 * xp) + 20 , 4 * (y + 4 * yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 4 * (2 * x + 3 * xp) , 4 * (2 * y + 3 * yp) , 4 * (2 * x + 3 * xp) + 20 , 4 * (2 * y + 3 * yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 4 * (3 * x + 2 * xp) , 4 * (3 * y + 2 * yp) , 4 * (3 * x + 2 * xp) + 20 , 4 * (3 * y + 2 * yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 4 * (4 * x + xp) , 4 * (4 * y + yp) , 4 * (4 * x + xp) + 20 , 4 * (4 * y + yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 20 * x , 20 * y , 20 + 20 * x , 20 + 20 * y)
    c.after(9)
    c.update()

    count += 1
    if x == WIDTH-1 :
        return count
    elif x == xp and y > yp:
        if field[x+1][y] == 0:
            return(left_hand(x+1 , y , x , y , count))
        else:
            if field[x][y+1] == 0:
                return(left_hand(x , y+1 , x , y , count))
            else:
                if field[x-1][y] == 0:
                    return(left_hand(x-1 , y , x , y , count))
                else:
                    return(left_hand(x , y-1 , x , y , count))

    elif x > xp and y == yp:
        if field[x][y-1] == 0:
            return(left_hand(x , y-1 , x , y , count))
        else:
            if field[x+1][y] == 0:
                return(left_hand(x+1 , y , x , y , count))
            else:
                if field[x][y+1] == 0:
                    return(left_hand(x , y+1 , x , y , count))
                else:
                    return(left_hand(x-1 , y , x , y , count))

    elif x == xp and y < yp:
        if field[x-1][y] == 0:
            return(left_hand(x-1 , y , x , y , count))
        else:
            if field[x][y-1] == 0:
                return(left_hand(x , y-1 , x , y , count))
            else:
                if field[x+1][y] == 0:
                    return(left_hand(x+1 , y , x , y , count))
                else:
                    return(left_hand(x , y+1 , x , y , count))

    elif x < xp and y == yp:
        if field[x][y+1] == 0:
            return(left_hand(x , y+1 , x , y , count))
        else:
            if field[x-1][y] == 0:
                return(left_hand(x-1 , y , x , y , count))
            else:
                if field[x][y-1] == 0:
                    return(left_hand(x , y-1 , x , y , count))
                else:
                    return(left_hand(x+1 , y , x , y , count))


"""
Aлгоритм прохождения лабиринта "Правая рука", подробнее в отчете
"""

def right_hand(x, y, xp, yp, count):
    global field
    global WIDTH
    global HEIGHT
    global c

    c.coords(mousebot, 4 * (x + 4 * xp) , 4 * (y + 4 * yp) , 4 * (x + 4 * xp) + 20 , 4 * (y + 4 * yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 4 * (2 * x + 3 * xp) , 4 * (2 * y + 3 * yp) , 4 * (2 * x + 3 * xp) + 20 , 4 * (2 * y + 3 * yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 4 * (3 * x + 2 * xp) , 4 * (3 * y + 2 * yp) , 4 * (3 * x + 2 * xp) + 20 , 4 * (3 * y + 2 * yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 4 * (4 * x + xp) , 4 * (4 * y + yp) , 4 * (4 * x + xp) + 20 , 4 * (4 * y + yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 20 * x , 20 * y , 20 + 20 * x , 20 + 20 * y)
    c.after(9)
    c.update()

    count += 1
    if x == WIDTH-1 :
        return count
    elif x == xp and y > yp:
        if field[x-1][y] == 0:
            return(right_hand(x-1 , y , x , y , count))
        else:
            if field[x][y+1] == 0:
                return(right_hand(x , y+1 , x , y , count))
            else:
                if field[x+1][y] == 0:
                    return(right_hand(x+1 , y , x , y , count))
                else:
                    return(right_hand(x , y-1 , x , y , count))

    elif x > xp and y == yp:
        if field[x][y+1] == 0:
            return(right_hand(x , y+1 , x , y , count))
        else:
            if field[x+1][y] == 0:
                return(right_hand(x+1 , y , x , y , count))
            else:
                if field[x][y-1] == 0:
                    return(right_hand(x , y-1 , x , y , count))
                else:
                    return(right_hand(x-1 , y , x , y , count))

    elif x == xp and y < yp:
        if field[x+1][y] == 0:
            return(right_hand(x+1 , y , x , y , count))
        else:
            if field[x][y-1] == 0:
                return(right_hand(x , y-1 , x , y , count))
            else:
                if field[x-1][y] == 0:
                    return(right_hand(x-1 , y , x , y , count))
                else:
                    return(right_hand(x , y+1 , x , y , count))

    elif x < xp and y == yp:
        if field[x][y-1] == 0:
            return(right_hand(x , y-1 , x , y , count))
        else:
            if field[x-1][y] == 0:
                return(right_hand(x-1 , y , x , y , count))
            else:
                if field[x][y+1] == 0:
                    return(right_hand(x , y+1 , x , y , count))
                else:
                    return(right_hand(x+1 , y , x , y , count))


"""
Aлгоритм прохождения "Вперед", подробнее в отчете
"""

def rightforward(x, y, xp, yp, count):
    global field
    global WIDTH
    global HEIGHT
    global c

    c.coords(mousebot, 4 * (x + 4 * xp) , 4 * (y + 4 * yp) , 4 * (x + 4 * xp) + 20 , 4 * (y + 4 * yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 4 * (2 * x + 3 * xp) , 4 * (2 * y + 3 * yp) , 4 * (2 * x + 3 * xp) + 20 , 4 * (2 * y + 3 * yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 4 * (3 * x + 2 * xp) , 4 * (3 * y + 2 * yp) , 4 * (3 * x + 2 * xp) + 20 , 4 * (3 * y + 2 * yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 4 * (4 * x + xp) , 4 * (4 * y + yp) , 4 * (4 * x + xp) + 20 , 4 * (4 * y + yp) + 20)
    c.after(9)
    c.update()
    c.coords(mousebot, 20 * x , 20 * y , 20 + 20 * x , 20 + 20 * y)
    c.after(9)
    c.update()

    count += 1
    if x == WIDTH-1 :
        return count
    elif x > xp and y == yp:
        if field[x+1][y] == 0:
            return(rightforward(x+1 , y , x , y , count))
        elif field[x][y-1] == 0:
            return(rightforward(x , y-1 , x , y , count))
        elif field[x][y+1] == 0:
            return(rightforward(x , y+1 , x , y , count))
        else:
            return(rightforward(x-1 , y , x , y , count))

    elif x == xp and y > yp:
        if field[x+1][y] == 0:
            return(right_hand(x+1 , y , x , y , count))
        else:
            if field[x][y+1] == 0:
                return(right_hand(x , y+1 , x , y , count))
            else:
                if field[x-1][y] == 0:
                    return(right_hand(x-1 , y , x , y , count))
                else:
                    return(right_hand(x , y-1 , x , y , count))

    elif x == xp and y < yp:
        if field[x+1][y] == 0:
            return(right_hand(x+1 , y , x , y , count))
        else:
            if field[x][y-1] == 0:
                return(right_hand(x , y-1 , x , y , count))
            else:
                if field[x-1][y] == 0:
                    return(right_hand(x-1 , y , x , y , count))
                else:
                    return(right_hand(x , y+1 , x , y , count))

    elif x < xp and y == yp:
        if field[x-1][y] == 0:
            return(right_hand(x-1 , y , x , y , count))
        else:
            if field[x][y-1] == 0:
                return(right_hand(x , y-1 , x , y , count))
            else:
                if field[x][y+1] == 0:
                    return(right_hand(x , y+1 , x , y , count))
                else:
                    return(right_hand(x+1 , y , x , y , count))

"""
Bизуализация лабиринта и стратегий его прохождения

"""


def painter():
    global HEIGHT
    global WIDTH
    global c
    global field

    #визуализация самого лабиринта

    for x in range(WIDTH):
        for y in range(HEIGHT):
            if field[x][y] == 1:
                c.create_rectangle(20 *x, 20 *y, 20 * x + 20, 20*y + 20, fill = "blue")
            elif field[x][y] == 0:
                c.create_rectangle(20 *x, 20 *y, 20 * x + 20, 20*y + 20, fill = "white")

    #показатели оканчательного счета каждой стратегии после прохождения 

   
painter()

#стратегия "вперед" визуализирована с помощью желтого шарика

mousebot = c.create_oval(0 , 20 * sh , 20 , 20 * sh + 20 , fill = "yellow")
c.create_text( 10, (HEIGHT)*20 + 40, text= "Forward strategion score:" + ' ' + str(rightforward(1, sh, 0, sh, 0)),  font = "Arial", anchor = 'w', fill = 'black')
    

#стратегия правой руки визуализирована с помощью зеленого шарика

c.coords(mousebot, 0 , 20 * sh , 20 , 20 * sh + 20)
c.itemconfig(mousebot, fill = "green")
c.create_text( 10, (HEIGHT)*20 + 80, text= "Right hand strategion score:" + ' ' + str(right_hand(1, sh, 0, sh, 0)),  font = "Arial", anchor = 'w', fill = 'green')       
    

#стратегия левой руки визуализирована с помощью красного шарика

c.coords(mousebot, 0 , 20 * sh , 20 , 20 * sh + 20)
c.itemconfig(mousebot, fill = "red")
c.create_text( 10, (HEIGHT)*20 + 120, text= "Left hand strategion score:" + ' ' + str(left_hand(1, sh, 0, sh, 0)),  font = "Arial", anchor = 'w', fill = 'red')

c.mainloop()
